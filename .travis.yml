language: rust
cache: cargo
rust:
  - stable
#  - beta
#  - nightly
matrix:
  include:
    # Stable channel.
    - os: linux
      rust: stable
      env: TARGET=x86_64-unknown-linux-gnu
    # - os: linux
    #   rust: stable
    #   env: TARGET=x86_64-unknown-linux-musl
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-gnu
    # - os: linux
    #   rust: stable
    #   env: TARGET=i686-unknown-linux-musl
    - os: osx
      rust: stable
      env: TARGET=x86_64-apple-darwin
    - os: windows
      rust: stable
      env: TARGET=x86_64-pc-windows-msvc
  # allow_failures:
  #   - rust: nightly
  fast_finish: true

addons:
  apt:
    packages:
      # needed for i686-unknown-linux-gnu target
      - gcc-multilib
      # needed to build deb packages
      - fakeroot

env:
  global:
    # Used on the deployment script
    - PROJECT_NAME=ffizer
    - LIBZ_SYS_STATIC=1

install:
  # prevent target re-add error from rustup
  - if [[ "$TRAVIS_OS_NAME" = "linux" && "$TARGET" != "x86_64-unknown-linux-gnu" ]]; then rustup target add $TARGET; fi
#   - rustup component add rustfmt-preview

# # Code formatting check
# before_script: |
#   - cargo fmt -- --write-mode=diff

script:
  # Incorporate TARGET env var to the build and test process
  - cargo build --target $TARGET
  - cargo test --target $TARGET

before_deploy:
  - cargo build --target "$TARGET" --release
  - if [[ "$TARGET" != "x86_64-pc-windows-msvc" ]]; then strip target/${TARGET}/release/${PROJECT_NAME}; fi
  - tar -czvf  "${PROJECT_NAME}_${TRAVIS_TAG}-${TARGET}.tar.gz" target/${TARGET}/release/${PROJECT_NAME} target/${TARGET}/release/${PROJECT_NAME}.exe

deploy:
  provider: releases
  api_key:
    secure: T+z/yrD7lCiqgnBYa3Nzt6bXSAEKxL8EKuLOTQh9tJl34cZ+sm1801ob+obp43y6SXx3yBnCGtgLxVrbWwELPfTHv1ZxKQx2711ijWwRup2pDi7GeAX7eB+J1oxQzQPydgStwaDmlybtPy4CrxSqoMMNQ6lN/pvLOWwM8rrmptnmlCcdoPizl5TEgoIRx0+1oX0Pe2Q9tCDBnSgIdRo5MJlo23vK8zeC4Wy6jK/llX1vK9rw4r4u7tu4wYsD8s3yefwMcDKFlxkXvNvtHnvnlfCjGq9cYIjgrUjTAJMzF8LjI+GBBJlC5odgUJMKZ4jW4x0tBgN31jW7yxJR5tRpvxOcrsQhv3AefQ+nXl66SqqNiSwP+Uu4gQqNybhsk0j8FHgCP+4lGK+FI8ivunqO4ivd7FmyjhGOMHdH9kpJ5NwJ4AyU0Yseoj0dEmwQcu2uORdfJ29l7LqrczAbyE2j9eOHl8U1TGKFqc4gT6JVeBkN05CussYb8HRXWvPiyMLDI9BL5DI/930InoP/rrB2DpOGQmQeXWbyVExaqdJummzqmGV0tWuxu4gRuA8qhRalzGfSztRnMrPaUr2/Ltg+oioWgoDNBVnuHTMxPpUyFISf2oGFpxhPNZRuyPAEFyD+kqXPAlY/3s/j/rCn3vAlmD4+H6hrCqa4KnTpFpFQxfs=
  file_glob: true
  # NOTE explanation on each env variable
  # - PROJECT_NAME: name of the project, set on the `env.global` above
  # - TRAVIS_TAG: tag name that the build is being deployed for, usually the version number
  # - TARGET: target triple of the build
  file:
    - ${PROJECT_NAME}_${TRAVIS_TAG}-${TARGET}.*
  # don't delete artifacts from previous stage
  skip_cleanup: true
  on:
    rust: stable
    tags: true
    repo: davidB/ffizer
    condition: $TRAVIS_RUST_VERSION = stable && $TARGET != ""

notifications:
  email:
    on_success: never
