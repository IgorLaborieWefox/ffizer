trigger:
  # batch: true
  branches:
    include:
    - "*"
  tags:
    include:
    - "*"

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
      TARGET: x86_64-unknown-linux-gnu
      PROFILE: linux
    macos:
      imageName: 'macos-10.13'
      TARGET: x86_64-apple-darwin
      PROFILE: mac
    windows:
      imageName: 'vs2017-win2016'
      TARGET: x86_64-pc-windows-msvc
      PROFILE: windows

pool:
  vmImage: $(imageName)

variables:
  RUSTUP_TOOLCHAIN: stable
  CARGO_MAKE_CI: TRUE
  # CARGO_MAKE_RUN_CODECOV: true
  CARGO_HOME: $(Pipeline.Workspace)/.cargo

steps:
- task: CacheBeta@0
  inputs:
    key: cargo | $(Agent.OS)
    path: $(CARGO_HOME)
  displayName: Cache cargo home

# Linux & Mac
- bash: |
    curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$CARGO_HOME/bin"
  condition: ne( variables['Agent.OS'], 'Linux' )
  displayName: Install rustup linux & max

- script: |
    (cargo make --version | grep "cargo-make 0.22.1" ) || cargo install --version 0.22.1 --force cargo-make
  condition: ne( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install cargo-make (not windows)

# Windows
- script: |
    curl -sSf -o rustup-init.exe https://win.rustup.rs
    rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
    set PATH=%PATH%;%CARGO_HOM%\bin
    echo "##vso[task.setvariable variable=PATH;]%PATH%;%CARGO_HOME%\bin"
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install rustup windows

    # $CargoMakeVersion = cargo make --version
    # if ($CargoMakeVersion -ne "cargo-make 0.22.1") {
    #   cargo install --version 0.22.1 --force cargo-make
    # }
- script: |
    (cargo make --version) -Or (cargo install --version 0.22.1 --force cargo-make)
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install cargo-make windows

# All platforms.

- script: |
      rustup -V
      rustc -V
      cargo -V
      cargo make --version
  displayName: Query versions

- script: |
    cargo make --disable-check-for-updates --profile $(PROFILE) ci-flow
  displayName: Make ci-flow

- script: |
    cargo make --disable-check-for-updates --profile $(PROFILE) zip-release-ci-flow
  displayName: Make zip-release-ci-flow

- script: |
    cargo make --disable-check-for-updates --profile $(PROFILE) github-upload-flow
  displayName: Upload to gitHub release
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)


# - task: GithubRelease@0
#   displayName: create gitHub release
#   # condition: and(succeeded(), startsWith(variables['Build.SourceBranchName'], 'master'))
#   condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
#   inputs:
#     githubConnection: ffizer
#     repositoryName: ffizer/ffizer
#     assets: target/dist/*-$(TARGET).*
